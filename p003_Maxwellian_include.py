from p000_variables     import VARIABLES
from p001_Make_dVr_dVx  import Make_dVr_dVx
from tqdm import tqdm
import numpy as np
import sympy as sp
import copy
import time


def create_maxwellian_include(vr:np.ndarray, vx:np.ndarray, vx_shift:np.ndarray,Tmaxwell:np.ndarray,Tnorm: np.float32,mu:np.float32,mol:np.int32):
    q   = VARIABLES.q
    mH  = VARIABLES.mH

    Vr2pidVr, VrVr4pidVr,dVx,vrL,vrR,vxL,vxR,vol,vth_Deltavx,vx_Deltavx,vr_Deltavr,vr2vx2,jpa,jpb,jna,jnb = Make_dVr_dVx(vr,vx)

    nvr = len(vr)
    nvx = len(vx)
    nx  = len(vx_shift)
    vth = np.sqrt(2*q*Tnorm/(mu*mH))
    vth2= vth *vth
    vth3= vth2*vth
    vr2vx2_ran2=np.zeros((nvr,nvx), dtype = np.float64)
    
    
    AN  = np.zeros((nvr,nvx,2), dtype=np.float64)
    BN  = np.zeros((nvr,nvx,2), dtype=np.float64)
    sgn = [1,-1]
    maxwell = np.zeros((nvr,nvx,nx),dtype=np.float32)
    #################################################################
    for k in tqdm(range(nx),desc=f'k'):
        if Tmaxwell[k]>0.0:
            # # for i in tqdm(range(nvr),desc=f'i'):
            # for i in range(nvr):
            #     arg = -((vr[i]**2 + ((vx) - (vx_shift[k] / vth))**2) * mol * Tnorm / Tmaxwell[k])  # Error de \pm 3e-3
            #     arg = np.where(np.logical_and((-80 < arg),(arg < 0.0)), arg, -80)
            #     maxwell[i,:,k] = np.exp(arg)
            arg = -((vr[:, np.newaxis]**2 + (vx - vx_shift[k] / vth)**2) * mol * Tnorm / Tmaxwell[k])
            arg = np.where(np.logical_and((-80 < arg), (arg < 0.0)), arg, -80)
            maxwell[:, :, k] = np.exp(arg)

            # variable = np.array(sp.Matrix(maxwell[:, :, k]) * sp.Matrix(dVx), dtype=float).flatten()
            # maxwell[:,:,k] = copy.copy(maxwell[:,:,k]/(np.nansum(Vr2pidVr*variable)))

            # This change reduced 1.5s/iteration
            variable = np.sum(maxwell[:, :, k] * dVx, axis=1)
            maxwell[:, :, k] /= np.nansum(Vr2pidVr * variable)
            
            # Compute desired moments
            WxD = copy.copy(vx_shift[k])
            ED = (WxD**2)+3*q*(Tmaxwell[k])/(mol*mu*mH)
            # Compute present moments of Maxwell, WxMax, and EMax 
            # these two next variables don't interact with the code
            # # vx_dvx = vx*dVx
            # # maxwell_2d  = copy.copy(maxwell[:, :, k])
            
            # This change also reduced the time in othe 1.5s/ it
            # max_2d_xd   = np.array(sp.Matrix(maxwell[:, :, k]) * sp.Matrix(vx * dVx), dtype=float).flatten()
            max_2d_xd = np.sum(maxwell[:, :, k] * vx * dVx, axis=1)
            
            WxMax       = vth  * (np.nansum(Vr2pidVr * (max_2d_xd) ))
            EMax        = vth2 * (np.nansum(Vr2pidVr*(np.matmul((vr2vx2*maxwell[:,:,k]),dVx))))
            # Compute Nij from Maxwell, padded with zeros
            Nij = np.zeros((nvr+2,nvx+2), dtype=np.float64)  # The order of the error is maintained with float64, but not for float 32
            Nij[1:nvr+1,1:nvx+1]    = maxwell[:,:,k]*vol
            auxNij                  = Nij*vx_Deltavx
            Nijp1_vx_Dvx            = np.roll(auxNij, shift=-1, axis=1)
            Nij_vx_Dvx              = Nij*vx_Deltavx
            Nijm1_vx_Dvx            = np.roll(auxNij, shift=1, axis=1)
            auxNij2                 = Nij*vr_Deltavr
            Nip1j_vr_Dvr            = np.roll(auxNij2, shift=-1,axis=0 )
            Nij_vr_Dvr              = Nij*vr_Deltavr
            Nim1j_vr_Dvr            = np.roll(auxNij2, shift=1, axis=0)
            # Compute Ap, Am, Bp, and Bm (0=p 1=m)
            aux_AN = np.zeros((nvx+2,nvr+2),dtype=np.float64)
            aux_AN = Nij*vth_Deltavx

            _AN         = np.zeros((nvx+2,nvr+2), dtype=np.float64)
            _AN         = np.roll(aux_AN, shift=1, axis=1) - aux_AN
            AN[:,:,0]   = copy.copy(_AN[1:nvr+1,1:nvx+1])
            
            _AN         = np.zeros((nvx+2,nvr+2), dtype=np.float64)
            _AN         = -np.roll(aux_AN, shift=-1, axis=1) + aux_AN
            AN[:,:,1]   = copy.copy(_AN[1:nvr+1,1:nvx+1])

            BN[:,jpa+1:jpb+1,0] =  Nijm1_vx_Dvx[1:nvr+1,jpa+2:jpb+2] - Nij_vx_Dvx[1:nvr+1,jpa+2:jpb+2]
            BN[:,jpa,0]         = -Nij_vx_Dvx[1:nvr+1,jpa+1]
            BN[:,jnb,0]         =  Nij_vx_Dvx[1:nvr+1,jnb+1]
            BN[:,jna:jnb,0]     = -Nijp1_vx_Dvx[1:nvr+1,jna+1:jnb+1] + Nij_vx_Dvx[1:nvr+1,jna+1:jnb+1]
            BN[:,:,0]           =  BN[:,:,0] + Nim1j_vr_Dvr[1:nvr+1,1:nvx+1] - Nij_vr_Dvr[1:nvr+1,1:nvx+1]

            BN[:,jpa+1:jpb+1,1] = -Nijp1_vx_Dvx[1:nvr+1,jpa+2:jpb+2] + Nij_vx_Dvx[1:nvr+1,jpa+2:jpb+2]
            BN[:,jpa,1]         = -Nijp1_vx_Dvx[1:nvr+1,jpa+1]
            BN[:,jnb,1]         =  Nijm1_vx_Dvx[1:nvr+1,jnb+1]
            BN[:,jna:jnb,1]     =  Nijm1_vx_Dvx[1:nvr+1,jna+1:jnb+1] - Nij_vx_Dvx[1:nvr+1,jna+1:jnb+1]
            BN[1:nvr,:,1]       =  BN[1:nvr,:,1] - Nip1j_vr_Dvr[2:nvr+1,1:nvx+1] + Nij_vr_Dvr[2:nvr+1,1:nvx+1]
            BN[0,:,1]           =  BN[0,:,1] - Nip1j_vr_Dvr[1,1:nvx+1]

            # Remove padded zeros in Nij
            Nij = Nij[1:nvr+1,1:nvx+1]

            # Cycle through 4 possibilies of sign(a_Max),sign(b_Max)
            TB1 = np.zeros(2)#, dtype=np.float32)
            TB2 = np.zeros(2)#, dtype=np.float32)
            ia=0
            while ia<2:
                # Compute TA1, TA2    
                aux_TA1 = np.array(sp.Matrix(AN[:,:,ia]*sp.Matrix(vx)),dtype=float).flatten()
                TA1 = vth*np.sum(aux_TA1)
                TA2 = vth2*np.sum(vr2vx2*AN[:,:,ia])
                ib  = 0
                while ib<2:
                    # Compute TB1, TB2
                    if TB1[ib]==0:
                        aux_TB1 = np.array(sp.Matrix(BN[:,:,ib])*sp.Matrix(vx),dtype=float).flatten()
                        TB1[ib] = vth*np.sum(aux_TB1)
                        # print('TB1:',TB1, 'ib:',ib)
                    if TB2[ib]==0:
                        TB2[ib] = vth2*np.sum(vr2vx2*BN[:,:,ib])
                    denom = TA2*TB1[ib]-TA1*TB2[ib]
                    # print('denom:',denom, 'ib:',ib)
                    b_Max = 0.0
                    a_Max = 0.0
                    if denom!=0 and TA1 !=0:
                        b_Max = (TA2*(WxD-WxMax) - TA1*(ED-EMax))/denom
                        a_Max = (WxD-WxMax-TB1[ib]*b_Max)/TA1
                    if a_Max*sgn[ia] > 0 and b_Max*sgn[ib]>0:
                        maxwell[:,:,k] = (Nij + AN[:,:,ia]*a_Max + BN[:,:,ib]*b_Max)/vol
                        # np.savetxt('salida_23.dat', maxwell[:,:,k], fmt='%.4e',delimiter='\t')
                        ia = 2
                        ib = 2
                    ib = ib + 1
                ia= ia + 1

            aux_maxwell = np.array(sp.Matrix(maxwell[:,:,k])*sp.Matrix(dVx),dtype=float).flatten()
            maxwell[:,:,k] = maxwell[:,:,k]/np.sum(Vr2pidVr*aux_maxwell)
            
    return maxwell
                    
if __name__ == "__main__":
    # vr = np.array([ 0.07025444373403009,    0.14139327496887916,    0.21341649370454718,  
    #                 0.2863240999410342,     0.3601160936783402,     0.43479247491646505,  
    #                 0.510353243655409,      0.5867983998951719,     0.6641279436357537,  
    #                 0.7423418748771545,     0.8214401936193743,     0.901422899862413,  
    #                 0.9822899936062708,     1.0640414748509475,     1.146677343596443,  
    #                 1.230197599842758,      1.3146022435898914,     1.3998912748378438,  
    #                 1.4860646935866155,     1.5731224998362061,     1.6610646935866153,  
    #                 1.749891274837844,      1.8396022435898913,     1.9301975998427576,  
    #                 2.0216773435964432,     2.1140414748509473,     2.207289993606271,  
    #                 2.301422899862413,      2.396440193619374,      2.4923418748771544,  
    #                 2.5891279436357535,     2.6867983998951717,     2.785353243655409,  
    #                 2.8847924749164653,     2.9851160936783403,     3.086324099941034,  
    #                 3.1884164937045467,     3.291393274968879,      3.39525444373403, 3.5])
    # vx = np.array([-3.5,                   -3.39525444373403,      -3.291393274968879,  -3.1884164937045467,  
    #                -3.086324099941034,     -2.9851160936783403,    -2.8847924749164653,  
    #                -2.785353243655409,     -2.6867983998951717,    -2.5891279436357535,  
    #                -2.4923418748771544,    -2.396440193619374,     -2.301422899862413,  
    #                -2.207289993606271,     -2.1140414748509473,    -2.0216773435964432,  
    #                 -1.9301975998427576,   -1.8396022435898913,    -1.749891274837844,  
    #                 -1.6610646935866153, -  1.5731224998362061,    -1.4860646935866155,  
    #                 -1.3998912748378438,   -1.3146022435898914,    -1.230197599842758,  
    #                 -1.146677343596443,    -1.0640414748509475,    -0.9822899936062708,  
    #                 -0.901422899862413,    -0.8214401936193743,    -0.7423418748771545,  
    #                 -0.6641279436357537,   -0.5867983998951719,    -0.510353243655409,  
    #                 -0.43479247491646505,  -0.3601160936783402,    -0.2863240999410342,  
    #                 -0.21341649370454718,  -0.14139327496887916,   -0.07025444373403009,  
    #                  0.07025444373403009,   0.14139327496887916,    0.21341649370454718,  
    #                  0.2863240999410342,    0.3601160936783402,     0.43479247491646505,  
    #                  0.510353243655409,     0.5867983998951719,     0.6641279436357537,  
    #                  0.7423418748771545,    0.8214401936193743,     0.901422899862413,  
    #                  0.9822899936062708,    1.0640414748509475,     1.146677343596443,  
    #                  1.230197599842758,     1.3146022435898914,     1.3998912748378438,  
    #                  1.4860646935866155,    1.5731224998362061,     1.6610646935866153,  
    #                  1.749891274837844,     1.8396022435898913,     1.9301975998427576,  
    #                  2.0216773435964432,    2.1140414748509473,     2.207289993606271,  
    #                  2.301422899862413,     2.396440193619374,      2.4923418748771544,  
    #                  2.5891279436357535,    2.6867983998951717,     2.785353243655409,  
    #                  2.8847924749164653,    2.9851160936783403,     3.086324099941034,  
    #                  3.1884164937045467,    3.291393274968879,      3.39525444373403,   3.5])
    # vx_shift = [0.0]
    # Tmaxwell = [0.02524895]
    # Tnorm = 74.317975
    # mol = 2
    # mu  = 2.0
    ##########################################################################################################################################
    ##########################################################################################################################################
    ##########################################################################################################################################
    ##########################################################################################################################################
    # vr = np.array([0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682, 0.4317553965653143, 0.553566044153152,  
    #         0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419, 1.339917123466215, 1.532646907603602,  
    #         1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068, 2.673593669664414, 2.937242590351351,  
    #         3.21271136712988, 3.5])
    # vx = np.array([-3.5, -3.21271136712988, -2.937242590351351, -2.673593669664414, -2.421764605069068, -2.181755396565315,  
    #         -1.953566044153152, -1.737196547832581, -1.532646907603602, -1.339917123466215, -1.159007195420419, -0.9899171234662149,  
    #         -0.8326469076036023, -0.6871965478325813, -0.553566044153152, -0.4317553965653143, -0.3217646050690682, -0.2235936696644137,  
    #         -0.1372425903513508, -0.06271136712987961, 0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682,  
    #         0.4317553965653143, 0.553566044153152, 0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419,  
    #         1.339917123466215, 1.532646907603602, 1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068,  
    #         2.673593669664414, 2.937242590351351, 3.21271136712988, 3.5])

    # vx_shift = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    # Tmaxwell = np.array([9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.353203155001086, 9.373764910512076, 9.396642210011589, 9.550901584045615, 9.744629809912034, 10.016827740354117, 10.41942009712586, 10.850431675580952, 11.302672083203914, 11.760846052108441, 12.249747256184866, 12.786011649146529, 13.335317899146544, 13.896924241165312, 14.461812273677445, 15.00772384603196, 15.524990855997217, 16.03142479493324, 16.46155264211707, 16.86981647052882, 17.223224797860684, 17.51513957277031, 17.780571329996604, 17.92301563922854, 18.029535333340856, 18.089501488199303, 18.108104705810547, 18.108104705810547, 18.108104705810547, 18.108104705810547, 18.108104705810547, 18.108104705810547, 18.109179352983897, 18.12300873972003, 18.142228410937125, 18.20386173910835, 18.306568486992262, 18.440815409165822, 18.651521976548644, 18.900970038016787, 19.205109057532855, 19.55525068296369, 19.93960698368101, 20.367488545683496, 20.82293073944747, 21.292028852033454, 21.77093977995033, 22.255296792640355, 22.737303568252862, 23.217501779866353, 23.711961179043584, 24.219425077414506, 24.75868421143798, 25.381276154797376, 26.085629814082754, 26.989239760057785, 28.072608607904115, 29.327058033111054, 30.762856449396622, 32.39069096405154, 34.31278264239886, 36.504714014121475, 39.01950698141633, 41.95052863465907, 45.383581218535916, 48.894830313202256, 52.47814567891719, 56.13221024260849, 59.85522399943026, 63.669470874430374, 67.30889626515891, 70.76738782792263, 74.12886042388425, 77.48437862513902, 80.83153765158241, 84.14353032793755, 87.41589319964561, 90.66862540859704, 93.91925609236498, 97.16686839705258, 100.40976547702215, 103.64686015728022, 106.88131941761233, 110.1153191780616, 113.3486302592922, 116.58109768056578, 119.81235607406389, 123.04318839475347, 126.27402107946864, 129.5048540076918, 132.7357154141247, 135.96659684261434, 139.19747161267233, 142.42832779928563, 145.65916564339616, 148.89000490120873, 152.12083297176895, 155.35165142219745, 158.5824483330587, 161.8132068782287, 165.04391078447878, 168.27451936462916, 171.50510443327252, 174.7356847540415, 177.96626260155332, 181.19682978905342, 184.42740785164548, 187.65798816993612, 190.88856843769906, 194.1191480988735, 197.34972895824856, 200.5802971068594, 203.81087268925387, 207.041468607837, 210.27208268930386, 213.50268786102865, 216.73328037967832, 219.96386318443487, 223.19443730760614, 226.42500549640351, 229.65557300691512, 232.88615217720064, 236.11672324806247, 239.34729750446513, 242.57787344421757, 245.80844116938783, 249.03902202876293])
    # Tnorm = 74.3179779562261
    # mol = 1
    # mu = 2.0
    #########################################################################################################################

    # vr = np.array([0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682, 0.4317553965653143, 0.553566044153152,  
    # 0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419, 1.339917123466215, 1.532646907603602,  
    # 1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068, 2.673593669664414, 2.937242590351351,  
    # 3.21271136712988, 3.5])
    # vx = np.array([-3.5, -3.21271136712988, -2.937242590351351, -2.673593669664414, -2.421764605069068, -2.181755396565315,  
    # -1.953566044153152, -1.737196547832581, -1.532646907603602, -1.339917123466215, -1.159007195420419, -0.9899171234662149,  
    # -0.8326469076036023, -0.6871965478325813, -0.553566044153152, -0.4317553965653143, -0.3217646050690682, -0.2235936696644137,  
    # -0.1372425903513508, -0.06271136712987961, 0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682,  
    # 0.4317553965653143, 0.553566044153152, 0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419,  
    # 1.339917123466215, 1.532646907603602, 1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068,  
    # 2.673593669664414, 2.937242590351351, 3.21271136712988, 3.5])


    # vx_shift = np.array([-6826.817916712873, -6806.543887034299, -6774.526548289827, -6735.58093763693, -6692.083761376806, -6645.832277055183, -6597.927502851226, -6549.970038643119, -6501.939133621908, -6451.745371967641, -6397.739009462682, -6339.427150179817, -6276.2603194431285, -6208.052134962803, -6134.479345273591, -6055.354524858145, -5970.6879053445955, -5880.494566445874, -5784.481983919882, -5681.593543509031, -5571.365729636909, -5453.560594788411, -5327.765327762121, -5193.778896967381, -5050.825283003286, -4898.590679354955, -4737.559030611634, -4568.447683870567, -4391.774247918827, -4207.978659209544, -4018.2580200234993, -3823.947023629464, -3626.3808059408693, -3427.4469067854516, -3228.8812040365174, -3028.567783022077, -2825.0425982892775, -2619.0992186179888, -2409.026651515657, -2195.2502495031176, -1979.9640677113903, -1764.3241543720553, -1550.137284728167, -1341.9223471823916, -1143.1881644786565, -954.3685090950801, -775.2067672638186, -605.3064444118429, -444.0872384290466, -290.8842388232968, -145.16603401918792, -6.228861265219608, 126.59778772054713, 253.76778041220723, 375.6690662361533, 492.48136327517045, 604.2934851007712, 711.0744453580228, 812.5365650426102, 908.3478534350669, 998.1426989312117, 1081.3729325992847, 1157.630254603127, 1253.3292685461047, 1372.898811615138, 1490.5243856566792, 1605.9900952770572, 1719.1234481325778, 1829.882323628225, 1938.3173464052607, 2044.524394782989, 2148.6705087929204, 2250.9400317418635, 2352.4812619676004, 2455.1438924078284, 2560.087136943942, 2667.9479413548056, 2778.829555666588, 2889.671697303007, 2994.816506540985, 3090.606299751505, 3175.8898340791116, 3249.7569593148687, 3308.4815199267928, 3346.7836942394138, 3361.1958176963562, 3350.2267554857563, 3314.3662973248324, 3255.52641901978, 3176.0311419163168, 3078.37212516665, 2965.2424582896265, 2839.5126571595442, 2704.1211246107455, 2561.9761146156106, 2415.874714722616, 2268.4624771001163, 2122.143583524222, 1979.0094852392897, 1840.8256399492814, 1708.9904684855537, 1584.5403122251141, 1468.1870602435035, 1360.3597747661263, 1261.2520363334277, 1170.8388068380748, 1088.902260398426, 1015.1165994761104, 949.1022647072077, 890.4535884884114, 838.7593410282788, 793.6176498098572, 754.6463824948728, 721.4898475751953, 693.8224399865672, 671.3518698710495, 653.8212337776442, 641.0088625898733, 632.728988496775, 628.8384222808071, 629.2428632774858, 633.9034229509989, 642.8470397361768, 656.1739439675152, 674.0662540694734, 696.7993081923978, 724.757579066967, 758.4570501225672, 798.5753275260048, 845.982464840871, 901.8256769323574, 967.6432531141974, 1045.4818233593958, 1138.0884279953868, 1249.1989432149778, 1383.9817368949975, 1549.745607549809, 1757.1189112972743, 2022.114597664262, 2369.9562073649968, 2842.686184086921, 3515.967130269707, 4543.287145873913, 6310.096015620202, 10274.617690012987])
    # Tmaxwell = np.array([0.7360266725798457, 0.7378080339536139, 0.7406024615561407, 0.7439853807693186, 0.7477410029249502, 0.7517076906072436, 0.7557868024093297, 0.7598399521838447, 0.7638687932935565, 0.7680471106620451, 0.772506716176351, 0.7772797680927037, 0.7824008040907132, 0.7878726423407038, 0.7937072984455612, 0.7999038734841802, 0.8064443400089367, 0.813309161753562, 0.8205004947698753, 0.8280720808816504, 0.836026028968073, 0.8443413260072448, 0.8530049787014535, 0.8619853404949075, 0.87128023034843, 0.8808507809785888, 0.890607995304733, 0.9004520001391719, 0.9102981596135726, 0.9200593011452057, 0.9296087841470513, 0.938833978488195, 0.9476422826769635, 0.9559357822848625, 0.9636538043958641, 0.9709513982867822, 0.9779360874514537, 0.9845788723662369, 0.990933114986132, 0.9969767560247949, 1.002624858335775, 1.0077856132492813, 1.012440569020568, 1.0165351701909011, 1.0200285193937788, 1.0229999878576301, 1.0255432480626825, 1.027750855776738, 1.029701067189751, 1.0314622700094038, 1.0331177503179574, 1.0347438091247876, 1.036390287466831, 1.0381376485702423, 1.0400823486111805, 1.0422885207739747, 1.044868880107873, 1.047981917024371, 1.051723547408797, 1.0563123634903984, 1.061975330431611, 1.0688781602100814, 1.0773441653736544, 1.0829612833509643, 1.08496227093868, 1.0869081479688572, 1.0888158224630968, 1.0907016957811386, 1.0925863402752372, 1.0944933338992366, 1.0964490652352357, 1.0984927989221314, 1.1006736793492637, 1.1030899538514725, 1.1058927957074909, 1.1092465837427876, 1.1133472647079803, 1.118435975308179, 1.1246739819403346, 1.1320816995324674, 1.1407192830994117, 1.150883113705063, 1.1631165528187295, 1.177646874267796, 1.1941554390352158, 1.2122289905374413, 1.2314254438643577, 1.2512745158643463, 1.2713956340857542, 1.2916137278773225, 1.3118121484681233, 1.3319225134469754, 1.351911929271833, 1.3717729647994408, 1.3915184462948957, 1.4111807150528999, 1.4308079763489927, 1.4504588278331711, 1.4701947085461442, 1.4900731109101117, 1.5101446093805184, 1.5304494140161018, 1.5510115786125802, 1.5718354862741897, 1.592904212074238, 1.6141882669729166, 1.635655504854937, 1.6572667791801725, 1.678974444547338, 1.7007247269078307, 1.7224598926696963, 1.744120119318636, 1.7656450417133753, 1.7869749654946652, 1.8080517463514791, 1.8288179252509968, 1.849215344763879, 1.8691854686892624, 1.8886713747742967, 1.9076127241328558, 1.9259550766082156, 1.9436588190909343, 1.9606882313763325, 1.9770086713824546, 1.9925858138357129, 2.0073847219463876, 2.021368694245656, 2.0344976331221756, 2.046725546989056, 2.0579956040876173, 2.068244065497953, 2.0774014492094275, 2.085382886257842, 2.0920822164962245, 2.0973642791181164, 2.1010535266107837, 2.1029164171958907, 2.102632600640972, 2.099743554552522, 2.0935475528978174, 2.0828394786907283, 2.0651162682541, 2.033586561171037, 1.9624532044550835, 1.688042566766689])
    # Tnorm = 74.3179779562261
    # mol = 1
    # mu = 2.0

    # vr = np.array([0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682, 0.4317553965653143, 0.553566044153152,  
    # 0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419, 1.339917123466215, 1.532646907603602,  
    # 1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068, 2.673593669664414, 2.937242590351351,  
    # 3.21271136712988, 3.5])
    # vx = np.array([-3.5, -3.21271136712988, -2.937242590351351, -2.673593669664414, -2.421764605069068, -2.181755396565315,  
    # -1.953566044153152, -1.737196547832581, -1.532646907603602, -1.339917123466215, -1.159007195420419, -0.9899171234662149,  
    # -0.8326469076036023, -0.6871965478325813, -0.553566044153152, -0.4317553965653143, -0.3217646050690682, -0.2235936696644137,  
    # -0.1372425903513508, -0.06271136712987961, 0.06271136712987961, 0.1372425903513508, 0.2235936696644137, 0.3217646050690682,  
    # 0.4317553965653143, 0.553566044153152, 0.6871965478325813, 0.8326469076036023, 0.9899171234662149, 1.159007195420419,  
    # 1.339917123466215, 1.532646907603602, 1.737196547832581, 1.953566044153152, 2.181755396565315, 2.421764605069068,  
    # 2.673593669664414, 2.937242590351351, 3.21271136712988, 3.5])

    # vx_shift = np.array([-7146.575962906402, -7129.089552398061, -7101.429591434152, -7067.704682111742, -7029.993621363653, -6989.868858927845, -6948.293573520785, -6906.66884473609, -6864.976642782618, -6821.38772434781, -6774.457171648906, -6723.753157024261, -6668.794203970589, -6609.416911647858, -6545.33815878886, -6476.393855355162, -6402.593385160722, -6323.950671484354, -6240.210445312096, -6150.448502684141, -6054.262442423865, -5951.445244733318, -5841.635630721149, -5724.66123652189, -5599.844090868109, -5466.916041012701, -5326.316811554869, -5178.6965913870345, -5024.536102807624, -4864.296252741915, -4699.154316221973, -4530.400461212939, -4359.3188426124125, -4187.687847237796, -4017.076719045663, -3845.0100346143367, -3669.485005267009, -3491.0066764255935, -3307.9529390213697, -3120.1417126240012, -2928.640347508955, -2733.6892474851043, -2536.479366985469, -2342.8714769597973, -2157.7132730869325, -1981.3023674379615, -1813.3311273761976, -1653.3769423210517, -1500.832842576848, -1355.0028282347096, -1215.3443798520407, -1081.1381228182322, -951.6555975156137, -826.3910020807768, -704.8995276113396, -586.8721754154343, -472.0838226069245, -360.43876002381154, -251.9796209488221, -146.86609107193172, -45.275877096043345, 52.53309370991394, 146.30554576562375, 240.02984144195943, 337.4027132331562, 434.14961753020646, 530.1638268144628, 625.3652694157001, 719.757277971577, 813.4013694180047, 906.3849367362142, 998.8253205679523, 1090.8503878963015, 1183.4991272982338, 1278.52977412222, 1377.3115866029523, 1480.9940137046924, 1590.5459286141736, 1703.9456966816567, 1816.6165533040335, 1925.917110712967, 2032.252119312521, 2137.4273150903255, 2240.4660024567756, 2337.6346953018146, 2425.7209057131463, 2502.1885501202473, 2565.1004278658356, 2613.2460924982997, 2645.950382925149, 2662.4744526306117, 2662.245207781723, 2644.938147251338, 2610.451828764479, 2558.960295267633, 2491.019854536725, 2407.6648992495657, 2310.395841500056, 2201.1435320043547, 2082.2469262103646, 1956.3365241617435, 1826.1980550428445, 1694.6311615203972, 1564.3050389869795, 1437.6317114006606, 1316.6245848122776, 1202.8063623026699, 1097.2508908247619, 1000.6381891575052, 913.3073303395613, 835.3202312713831, 766.5279227803508, 706.6329727753309, 655.2442608379904, 611.9223636092881, 576.2181347203888, 547.7023288135856, 525.984404366363, 510.7252150908784, 501.6519694623819, 498.56450161075094, 501.3420675369398, 509.9593296718056, 524.4962984813003, 545.1501807900165, 572.2509910197255, 606.282342503653, 647.9086603103998, 698.0084884679344, 757.7016118818847, 828.4359337260847, 912.1015079318859, 1011.1341647916188, 1128.6874234499717, 1268.8840031232307, 1437.1914221426268, 1641.0064020834998, 1890.6124062884699, 2200.8544724979174, 2594.310240941182, 3107.919280660781, 3808.681566336328, 4837.455221024829, 6563.916750159782, 10414.98877475612])
    # Tmaxwell = np.array([0.7559235632680446, 0.7574811238020567, 0.7599271413014389, 0.7628967983846345, 0.7662000694739247, 0.7696944852524871, 0.7732930595872115, 0.7768729414643188, 0.7804356017097857, 0.7841362125479532, 0.7880932434601581, 0.7923366179977338, 0.7968987038391552, 0.801783734145509, 0.807004436298921, 0.8125622126197258, 0.8184432349850009, 0.8246324583008541, 0.8311346626209577, 0.8380021108854119, 0.8452411158779909, 0.8528368193303106, 0.8607818954758998, 0.8690524734427921, 0.8776520298338235, 0.8865510919921719, 0.8956742139595746, 0.9049354363550689, 0.9142624505852297, 0.9235799326560986, 0.9327741113795297, 0.941743064473239, 0.9504024766365925, 0.958660684967725, 0.9664607028306492, 0.9739659403271829, 0.9812936096509032, 0.9884171020363473, 0.9953989342497376, 1.0022220560037196, 1.0087930386152457, 1.015012225412039, 1.020827393966294, 1.0261222779488586, 1.0308170825057872, 1.0349746348395927, 1.0386785042165656, 1.0420124569887463, 1.0450484379825171, 1.0478499780238038, 1.050492925427385, 1.053048008399091, 1.0555616565745685, 1.0581059733619045, 1.060766413199842, 1.0635971057846145, 1.0666961077874786, 1.0702037669270723, 1.074200030021346, 1.0788850539889432, 1.0844689323810754, 1.0911076010009484, 1.0991214352427723, 1.104840560406803, 1.1076431316154265, 1.11036253443657, 1.113006367522439, 1.1155827775888338, 1.1181049587387455, 1.1205897029688288, 1.12305673877464, 1.1255364197602142, 1.1280663478468504, 1.1307288881293693, 1.1336476539184956, 1.1369449632987563, 1.1407569106097024, 1.1452431162244, 1.1504777613272932, 1.156427659624395, 1.163118090354413, 1.1707702030754112, 1.1797868509170983, 1.1903387362127038, 1.2022664444017703, 1.215408415034207, 1.229622635404167, 1.2447486437511273, 1.2606701808276994, 1.2773819301130005, 1.294882418017023, 1.3131653478598175, 1.3322116382907192, 1.351983480236529, 1.3724225123108345, 1.3934541224467536, 1.414991363791368, 1.4369387244214955, 1.4591955542062656, 1.4816614914256716, 1.5042456849204373, 1.5268732110481884, 1.5494849728757516, 1.5720358353548602, 1.5944909514824885, 1.616829614027197, 1.6390482697587914, 1.6611478517369656, 1.6831254987008357, 1.7049719565617092, 1.7266703632861207, 1.7481961837748976, 1.769517968613961, 1.79059858313951, 1.811396598131873, 1.831866212417385, 1.851956791724931, 1.8716141053002728, 1.8907831687579526, 1.9094040041703473, 1.927421592329896, 1.944794843060808, 1.9614860803269951, 1.9774583856844328, 1.992674926884132, 2.0070981658607363, 2.0206889300900404, 2.033405136149494, 2.0451998317184135, 2.056017074755801, 2.065796559060985, 2.074475419180103, 2.08197986205936, 2.088220474628567, 2.0930857395408395, 2.096431567901385, 2.098063489397295, 2.0977048498107838, 2.094936800084235, 2.089075592354396, 2.078886928577233, 2.0617797885289066, 2.0308938334361306, 1.9608026879996256, 1.692149564272066])
    # Tnorm = 74.3179779562261
    # mol = 1
    # mu = 2.0

    # vr = np.array([0.07025444373403009, 0.1413932749688792, 0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651,  
    # 0.510353243655409, 0.5867983998951719, 0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413,  
    # 0.9822899936062708, 1.064041474850947, 1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844,  
    # 1.486064693586616, 1.573122499836206, 1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758,  
    # 2.021677343596443, 2.114041474850947, 2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154,  
    # 2.589127943635753, 2.686798399895172, 2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034,  
    # 3.188416493704547, 3.291393274968879, 3.39525444373403, 3.5])
    # vx = np.array([-3.5, -3.39525444373403, -3.291393274968879, -3.188416493704547, -3.086324099941034, -2.98511609367834,  
    # -2.884792474916465, -2.785353243655409, -2.686798399895172, -2.589127943635753, -2.492341874877154, -2.396440193619374,  
    # -2.301422899862413, -2.207289993606271, -2.114041474850947, -2.021677343596443, -1.930197599842758, -1.839602243589891,  
    # -1.749891274837844, -1.661064693586615, -1.573122499836206, -1.486064693586616, -1.399891274837844, -1.314602243589891,  
    # -1.230197599842758, -1.146677343596443, -1.064041474850947, -0.9822899936062708, -0.901422899862413, -0.8214401936193743,  
    # -0.7423418748771545, -0.6641279436357537, -0.5867983998951719, -0.510353243655409, -0.4347924749164651, -0.3601160936783402,  
    # -0.2863240999410342, -0.2134164937045472, -0.1413932749688792, -0.07025444373403009, 0.07025444373403009, 0.1413932749688792,  
    # 0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651, 0.510353243655409, 0.5867983998951719,  
    # 0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413, 0.9822899936062708, 1.064041474850947,  
    # 1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844, 1.486064693586616, 1.573122499836206,  
    # 1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758, 2.021677343596443, 2.114041474850947,  
    # 2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154, 2.589127943635753, 2.686798399895172,  
    # 2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034, 3.188416493704547, 3.291393274968879,  
    # 3.39525444373403, 3.5])

    # vx_shift = [0.0]
    # Tmaxwell = [0.025248945278829992]
    # Tnorm = 16.059729870008166
    # mol = 2
    # mu = 2.0

    # vr = np.array([0.07025444373403009, 0.1413932749688792, 0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651,  
    # 0.510353243655409, 0.5867983998951719, 0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413,  
    # 0.9822899936062708, 1.064041474850947, 1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844,  
    # 1.486064693586616, 1.573122499836206, 1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758,  
    # 2.021677343596443, 2.114041474850947, 2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154,  
    # 2.589127943635753, 2.686798399895172, 2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034,  
    # 3.188416493704547, 3.291393274968879, 3.39525444373403, 3.5])
    # vx = np.array([-3.5, -3.39525444373403, -3.291393274968879, -3.188416493704547, -3.086324099941034, -2.98511609367834,  
    # -2.884792474916465, -2.785353243655409, -2.686798399895172, -2.589127943635753, -2.492341874877154, -2.396440193619374,  
    # -2.301422899862413, -2.207289993606271, -2.114041474850947, -2.021677343596443, -1.930197599842758, -1.839602243589891,  
    # -1.749891274837844, -1.661064693586615, -1.573122499836206, -1.486064693586616, -1.399891274837844, -1.314602243589891,  
    # -1.230197599842758, -1.146677343596443, -1.064041474850947, -0.9822899936062708, -0.901422899862413, -0.8214401936193743,  
    # -0.7423418748771545, -0.6641279436357537, -0.5867983998951719, -0.510353243655409, -0.4347924749164651, -0.3601160936783402,  
    # -0.2863240999410342, -0.2134164937045472, -0.1413932749688792, -0.07025444373403009, 0.07025444373403009, 0.1413932749688792,  
    # 0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651, 0.510353243655409, 0.5867983998951719,  
    # 0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413, 0.9822899936062708, 1.064041474850947,  
    # 1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844, 1.486064693586616, 1.573122499836206,  
    # 1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758, 2.021677343596443, 2.114041474850947,  
    # 2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154, 2.589127943635753, 2.686798399895172,  
    # 2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034, 3.188416493704547, 3.291393274968879,  
    # 3.39525444373403, 3.5])

    # vx_shift = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    # Tmaxwell = [9.34678840637207, 9.34678840637207, 9.364474934460311, 12.441188234980412, 15.46188894188029, 17.245724522266876, 18.011673082459897, 18.108104705810547, 18.108104705810547, 18.14969254469597, 18.538723128748614, 19.276018202160284, 20.217825603465965, 21.219222760630494]
    # Tnorm = 16.059729870008166
    # mol = 1
    # mu = 2.0

    vr = np.array([0.07025444373403009, 0.1413932749688792, 0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651,  
    0.510353243655409, 0.5867983998951719, 0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413,  
    0.9822899936062708, 1.064041474850947, 1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844,  
    1.486064693586616, 1.573122499836206, 1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758,  
    2.021677343596443, 2.114041474850947, 2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154,  
    2.589127943635753, 2.686798399895172, 2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034,  
    3.188416493704547, 3.291393274968879, 3.39525444373403, 3.5])
    vx = np.array([-3.5, -3.39525444373403, -3.291393274968879, -3.188416493704547, -3.086324099941034, -2.98511609367834,  
    -2.884792474916465, -2.785353243655409, -2.686798399895172, -2.589127943635753, -2.492341874877154, -2.396440193619374,  
    -2.301422899862413, -2.207289993606271, -2.114041474850947, -2.021677343596443, -1.930197599842758, -1.839602243589891,  
    -1.749891274837844, -1.661064693586615, -1.573122499836206, -1.486064693586616, -1.399891274837844, -1.314602243589891,  
    -1.230197599842758, -1.146677343596443, -1.064041474850947, -0.9822899936062708, -0.901422899862413, -0.8214401936193743,  
    -0.7423418748771545, -0.6641279436357537, -0.5867983998951719, -0.510353243655409, -0.4347924749164651, -0.3601160936783402,  
    -0.2863240999410342, -0.2134164937045472, -0.1413932749688792, -0.07025444373403009, 0.07025444373403009, 0.1413932749688792,  
    0.2134164937045472, 0.2863240999410342, 0.3601160936783402, 0.4347924749164651, 0.510353243655409, 0.5867983998951719,  
    0.6641279436357537, 0.7423418748771545, 0.8214401936193743, 0.901422899862413, 0.9822899936062708, 1.064041474850947,  
    1.146677343596443, 1.230197599842758, 1.314602243589891, 1.399891274837844, 1.486064693586616, 1.573122499836206,  
    1.661064693586615, 1.749891274837844, 1.839602243589891, 1.930197599842758, 2.021677343596443, 2.114041474850947,  
    2.207289993606271, 2.301422899862413, 2.396440193619374, 2.492341874877154, 2.589127943635753, 2.686798399895172,  
    2.785353243655409, 2.884792474916465, 2.98511609367834, 3.086324099941034, 3.188416493704547, 3.291393274968879,  
    3.39525444373403, 3.5])


    vx_shift = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    Tmaxwell = np.array([9.25226987535977, 9.267831138409914, 9.292527346370465, 12.376980489168021, 15.40275829495319, 17.185720131817373, 17.95683851352868, 18.053382881549737, 18.053382881549737, 18.095019142659755, 18.484496925573232, 19.22261202006535, 20.16541783450106, 21.167821023508647])
    Tnorm = 16.059729870008166
    mol = 2
    mu = 2.0

    start_time = time.time()
    maxwell = create_maxwellian_include(vr, vx, vx_shift,Tmaxwell,Tnorm,mu,mol)
    end_time = time.time()
    total_time = end_time - start_time
    print(f"Tiempo total de ejecución: {total_time:.4f} segundos")
    print('Maxwell',maxwell.shape)
    print('vr',vr.shape)
    print('vx',vx.shape)
    print('vx_shift',vx_shift.shape)
    print('Tmaxwell',Tmaxwell.shape)
    print('Tnorm',Tnorm)
    print('mu',mu)
    print('mol',mol)
    
    # np.savetxt('salida.dat', maxwell[:,:,0], fmt='%.4e',delimiter='\t')
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    import numpy as np
    from matplotlib.colors import LogNorm
    from matplotlib.animation import FuncAnimation, PillowWriter

    output_gif_path = "maxwell_evolutionh2_3_2.gif"

    # Crear figura para la animación
    fig, ax = plt.subplots(figsize=(6, 6))

    # Verificar si hay valores negativos o ceros
    if np.any(maxwell <= 0):
        maxwell[maxwell <= 0] = 1e-10  # Reemplazar ceros y valores negativos

    # Configurar la imagen inicial con LogNorm
    valor_min = np.min(maxwell[maxwell > 0])  # El valor mínimo positivo
    valor_max = np.max(maxwell)
    im = ax.imshow(maxwell[:, :, 0], cmap="coolwarm", norm=LogNorm(vmin=valor_min, vmax=valor_max))
    ax.set_title("Layer 0")
    plt.colorbar(im, ax=ax, label="Value")

    # Función de actualización para cada frame
    def update(frame):
        im.set_data(maxwell[:, :, frame])
        ax.set_title(f"Layer {frame}")

    # Crear la animación
    anim = FuncAnimation(fig, update, frames=maxwell.shape[2], interval=100)

    # Guardar el GIF
    anim.save(output_gif_path, writer=PillowWriter(fps=10))
    plt.show()