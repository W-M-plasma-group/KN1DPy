import copy
import numpy             as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
from scipy.interpolate import RBFInterpolator
from scipy.interpolate import RectBivariateSpline

from p000_general_inputs_interpolate import original_data

def JHS_Coef(n_to_interp,t_to_interp):
    # Convert input values to log-space
    log_n_to_interp = np.log(n_to_interp)
    log_t_to_interp = np.log(t_to_interp)
    
    # Retrieve original data for interpolation
    log_n_data,log_t_data,log_s_data = original_data()[:3]

    # Create the interpolator
    interpolatorRBSpline = RectBivariateSpline(log_n_data, log_t_data, log_s_data)
    
    # Perform the interpolation in log-space
    log_s_interpolated = interpolatorRBSpline(log_n_to_interp, log_t_to_interp, grid=False)
    
    # Convert the result back to linear scale
    s_interpolated = np.exp(log_s_interpolated)

    return s_interpolated

if __name__ == "__main__":
    Density = np.array([8.529762443780424e+17, 1.166678028854428e+18, 1.628554083661188e+18, 2.036659383130584e+18, 2.227688922516581e+18, 2.41467000241316e+18,  
                        2.471536926117491e+18, 2.474587257751732e+18, 2.53455740085265e+18, 2.78766324060693e+18, 3.052330238189064e+18, 3.376314044293282e+18,  
                        3.721903043739879e+18, 4.085641866071011e+18, 4.490563821868612e+18, 4.900116555792079e+18, 5.328639951013514e+18, 5.763411516283688e+18,  
                        6.258668445493425e+18, 6.884897529217857e+18, 7.532562105659867e+18, 8.245540842577419e+18, 8.978140610546499e+18, 9.764932881845998e+18,  
                        1.064510309244566e+19, 1.154562457754335e+19, 1.246612004855399e+19, 1.339219824189277e+19, 1.438086279128058e+19, 1.546895051172811e+19,  
                        1.658441456492423e+19, 1.77591632810782e+19, 1.894972647814284e+19, 2.012007708775305e+19, 2.125441644021092e+19, 2.23744660734298e+19,  
                        2.335807233084692e+19, 2.430258503689977e+19, 2.513778011485848e+19, 2.58486679791199e+19, 2.650697354927826e+19, 2.696688810884831e+19,  
                        2.736885360390719e+19, 2.767755514734248e+19, 2.78985161142427e+19, 2.807845973719836e+19, 2.821134945302991e+19, 2.832900993717576e+19,  
                        2.847840626093951e+19, 2.86658701262413e+19, 2.888495514205416e+19, 2.925228520795812e+19, 2.968227027287051e+19, 3.02519331399673e+19,  
                        3.094773278270731e+19, 3.173437902821304e+19, 3.27048806536534e+19, 3.376853862466836e+19, 3.492394055726716e+19, 3.615236348329313e+19,  
                        3.742302914930352e+19, 3.869119468231002e+19, 3.99577748280879e+19, 4.114727167111908e+19, 4.226633624201875e+19, 4.331837908428376e+19,  
                        4.426173988189363e+19, 4.512142801431744e+19, 4.597899743671135e+19, 4.684002055130495e+19, 4.77702241322341e+19, 4.893563197939785e+19,  
                        5.033180439327269e+19, 5.337742052312856e+19, 5.791871199181192e+19, 6.391859573325524e+19, 7.153223284268655e+19, 8.085473007409258e+19,  
                        8.79982692019479e+19, 9.307127112966591e+19, 9.830697941199636e+19, 1.071174126556021e+20, 1.202394332201221e+20, 1.309072041363556e+20,  
                        1.39150859397991e+20, 1.452980223823099e+20, 1.497733580469721e+20, 1.520364062762668e+20, 1.542557778545155e+20, 1.564299413692613e+20,  
                        1.58574779016409e+20, 1.60707354245483e+20, 1.628226997976754e+20, 1.648657845199277e+20, 1.668274043353586e+20, 1.687353998163313e+20,  
                        1.706122383620804e+20, 1.724443928750773e+20, 1.7420658108391e+20, 1.758827826988874e+20, 1.774878239179623e+20, 1.790223412895964e+20,  
                        1.804526508166777e+20, 1.817531365519266e+20, 1.828690366046071e+20, 1.839198092155461e+20, 1.849705773749886e+20, 1.860213579120357e+20,  
                        1.870721252762004e+20, 1.881229141639989e+20, 1.89173700285943e+20, 1.902244750275706e+20, 1.912752425715314e+20, 1.923260205225596e+20,  
                        1.933768010378759e+20, 1.943999010430651e+20, 1.953612264256265e+20, 1.962303432238066e+20, 1.970064594125254e+20, 1.975424922456411e+20,  
                        1.980360523630629e+20, 1.985296069031725e+20, 1.990231618600746e+20, 1.995167168038527e+20, 2.000102843650515e+20, 2.005032831018369e+20,  
                        2.00994699819287e+20, 2.014758731108977e+20, 2.019153318855567e+20, 2.021724053956685e+20, 2.024151617578905e+20, 2.026579244559852e+20,  
                        2.029006934973297e+20, 2.03143456894858e+20, 2.033862270378502e+20, 2.036289872884774e+20, 2.038717469980017e+20, 2.041145120381283e+20,  
                        2.04357282187226e+20, 2.046000388646562e+20, 2.048428113435099e+20, 2.050855777300937e+20, 2.053283381187215e+20, 2.055711077294206e+20,  
                        2.05813856787738e+20])
    Te = np.array(     [9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207,  
                        9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207,  
                        9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207, 9.34678840637207,  
                        9.353203155001086, 9.373764910512076, 9.396642210011589, 9.550901584045615, 9.744629809912034, 10.01682774035412,  
                        10.41942009712586, 10.85043167558095, 11.30267208320391, 11.76084605210844, 12.24974725618487, 12.78601164914653,  
                        13.33531789914654, 13.89692424116531, 14.46181227367745, 15.00772384603196, 15.52499085599722, 16.03142479493324,  
                        16.46155264211707, 16.86981647052882, 17.22322479786068, 17.51513957277031, 17.7805713299966, 17.92301563922854,  
                        18.02953533334086, 18.0895014881993, 18.10810470581055, 18.10810470581055, 18.10810470581055, 18.10810470581055,  
                        18.10810470581055, 18.10810470581055, 18.1091793529839, 18.12300873972003, 18.14222841093713, 18.20386173910835,  
                        18.30656848699226, 18.44081540916582, 18.65152197654864, 18.90097003801679, 19.20510905753286, 19.55525068296369,  
                        19.93960698368101, 20.3674885456835, 20.82293073944747, 21.29202885203345, 21.77093977995033, 22.25529679264035,  
                        22.73730356825286, 23.21750177986635, 23.71196117904358, 24.21942507741451, 24.75868421143798, 25.38127615479738,  
                        26.08562981408275, 26.98923976005779, 28.07260860790412, 29.32705803311105, 30.76285644939662, 32.39069096405154,  
                        34.31278264239886, 36.50471401412148, 39.01950698141633, 41.95052863465907, 45.38358121853592, 48.89483031320226,  
                        52.47814567891719, 56.13221024260849, 59.85522399943026, 63.66947087443037, 67.30889626515891, 70.76738782792263,  
                        74.12886042388425, 77.48437862513902, 80.83153765158241, 84.14353032793755, 87.41589319964561, 90.66862540859704,  
                        93.91925609236498, 97.16686839705258, 100.4097654770221, 103.6468601572802, 106.8813194176123, 110.1153191780616,  
                        113.3486302592922, 116.5810976805658, 119.8123560740639, 123.0431883947535, 126.2740210794686, 129.5048540076918,  
                        132.7357154141247, 135.9665968426143, 139.1974716126723, 142.4283277992856, 145.6591656433962, 148.8900049012087,  
                        152.1208329717689, 155.3516514221974, 158.5824483330587, 161.8132068782287, 165.0439107844788, 168.2745193646292,  
                        171.5051044332725, 174.7356847540415, 177.9662626015533, 181.1968297890534, 184.4274078516455, 187.6579881699361,  
                        190.8885684376991, 194.1191480988735, 197.3497289582486, 200.5802971068594, 203.8108726892539, 207.041468607837,  
                        210.2720826893039, 213.5026878610286, 216.7332803796783, 219.9638631844349, 223.1944373076061, 226.4250054964035,  
                        229.6555730069151, 232.8861521772006, 236.1167232480625, 239.3472975044651, 242.5778734442176, 245.8084411693878,  
                        249.0390220287629])		
    
    log_n_to_interp = np.log(Density)
    log_t_to_interp = np.log(Te)
    # Interpolator generator
    s_interpolated = JHS_Coef(Density,Te)
    log_s_interpolated = np.log(s_interpolated)

    log_n_data,log_t_data,log_s_data = original_data()[:3]

    ln_n_grid, ln_t_grid = np.meshgrid(log_n_data, log_t_data,indexing='ij')
    #------------------------------------------------------------------------------------------
    import matplotlib.pyplot as plt
    fig_RBSpline = plt.figure()
    ax_RBSpline = fig_RBSpline.add_subplot(111, projection='3d')
    ax_RBSpline.plot_surface(ln_n_grid,ln_t_grid,log_s_data,cmap='jet',alpha=0.3,edgecolor='k')
    ax_RBSpline.scatter(ln_n_grid,ln_t_grid,log_s_data)
    ax_RBSpline.scatter(log_n_to_interp, log_t_to_interp,log_s_interpolated,marker='1',color='black')
    ax_RBSpline.scatter(ln_n_grid[0,0],ln_t_grid[0,0],log_s_data[0,0],color='red',s=9**2)
    ax_RBSpline.scatter(ln_n_grid[-1,-1],ln_t_grid[-1,-1],log_s_data[-1,-1],color='green',s=9**2)
    ax_RBSpline.set_xlabel('n')
    ax_RBSpline.set_ylabel('t')
    ax_RBSpline.set_zlabel('s')
    plt.show()